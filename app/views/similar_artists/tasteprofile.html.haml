#resetModal.modal.hide.fade{"aria-hidden" => "true", "aria-labelledby" => "myModalLabel", :role => "dialog", :tabindex => "-1"}
  .modal-header
	%button.close{"aria-hidden" => "true", "data-dismiss" => "modal", :type => "button"} x
	%h3#myModalLabel Reset your taste!
  .modal-body
	%span.label.label-warning Warning
	This will delete all of your music taste data. Are you really sure that you want to do this?
  .modal-footer
	%button.btn{"aria-hidden" => "true", "data-dismiss" => "modal"} Cancel
	%button#reset-taste.btn.btn-danger{:type => "button"} Delete your taste data
#restartModal.modal.hide.fade{"aria-hidden" => "true", "aria-labelledby" => "changeModalLabel", :role => "dialog", :tabindex => "-1"}
  .modal-header
	%button.close{"aria-hidden" => "true", "data-dismiss" => "modal", :type => "button"} x
	%h3#changeModalLabel New Station
  .modal-body
	%label Type in the name of an artist to change the station to music by that artist and other similar artists.
	<input id="seed-artist" type="text" class="input-large" placeholder="an artist name"
  .modal-footer
	%button.btn{"aria-hidden" => "true", "data-dismiss" => "modal"} Cancel
	%button#restart-station.btn.btn-primary{:type => "button"} Go
#wrap.navbar.navbar-inverse
  .navbar-inner
	.container
	  %a#show-search.brand Taste Profile Demo
	  %ul.nav
		%li.nav-choice.active
		  %a#show-main Main
		%li.nav-choice
		  %a{:href => "https://github.com/plamere/en-demos/blob/master/tp/"} The Source
		%li.nav-choice
		  %a{:href => "http://developer.echonest.com/docs/v4/catalog.html"} Taste Profile API
	  %ul.nav.pull-right
		%li.nav-choice
		  %a{:href => "http://static.echonest.com/labs"} Labs
		%li.nav-choice
		  %a{:href => "http://static.echonest.com/labs/demo.html"} Demos
		%li.nav-choice
		  %a{:href => "http://developer.echonest.com"} developer.echonest.com
.container
  #the-form.span10.well
	%h1 Taste Profile Demo
	%p
	  Maintain your taste in an Echo Nest Taste Profile and use this profile to generate a personalized
	  radio station.
	#create
	  %h4 Create a taste profile
	  <input id="artists" type="text" class="input-xxlarge" placeholder="Enter comma separated artist names  ..."
	  %button#go.btn.btn-primary Go
	  #status.hide
		.progress.progress-striped
		  #progress-bar.bar   #the-player.row.span10.well
	#titles
	  %h4#rp-song-title
	  #rp-artist-name
	#rp-now-playing.span5
	  %img#rp-album-art
		#bottom-buttons
		  #button-panel.btn-group
			%button#rp-pause-play.btn.btn-primary.btn-small{:rel => "tooltip", :title => "play/pause the song"}
			  %i.icon-white.icon-play
			<button id='rp-next' rel='tooltip' title='go to the next song',
			class="btn btn-primary btn-small">
			%i.icon-white.icon-forward
		  .btn-group.pull-right
			%button#bad-song.btn.btn-danger.btn-small{:rel => "tooltip", :title => "I don't like this song"}
			  %i.icon-white.icon-thumbs-down
			%button#good-song.btn.btn-success.btn-small{:rel => "tooltip", :title => "I like this song"}
			  %i.icon-white.icon-thumbs-up
		#info-extra     #more-info.span4
	  #tp-buttons
		%button#view-tp.btn.btn-primary View Profile
		%a.btn.btn-danger{"data-toggle" => "modal", :href => "#resetModal"} Reset Profile
		%button#view-station.btn.btn-primary View Station
		%a#change-station.btn.btn-primary{"data-toggle" => "modal", :href => "#restartModal"} New Station
	  #info-container
		#info       %h4 Up Next
	  #up-next   .container.span8.offset1
	%small
	  Powered by
	  %a{:href => "http://echonest.com"} The Echo Nest
	  and
	  = succeed "." do
		%a{:href => "http://rdio.com"} Rdio
  :javascript
	jQuery.ajaxSettings.traditional = true; 
	var api_key = 'NO_API_KEY';
	var en;
	var curSong = null;
	var maxTimeForSkip = 3000;
	var cookieOpts = {expires:365, path: '/' };
	var catalogID = 'CALQHEI13DB585AFEA';
	
	
	function info(s) {
		$("#info").removeClass();
		if (s.length > 0) {
			$("#info").addClass("alert alert-info");
		}
		$("#info").text(s);
	}
	
	function tinfo(s) {
		info(s);
		setTimeout( function() { info(""); }, 5000);
	}
	
	function error(s) {
		$("#info").removeClass();
		if (s.length > 0) {
			$("#info").addClass("alert alert-error");
		}
		$("#info").text(s);
	}
	
	function terror(s) {
		error(s);
		setTimeout( function() { error(""); }, 5000);
	}
	
	function getRdioID(song) {
		var id = song.tracks[0].foreign_id;
		var rawID = id.split(':')[2]
		return rawID;
	}
	
	function playSong(song) {
		var rdioID = getRdioID(song);
		curSong = song;
		R.player.play({
			source: rdioID
		});
		$("#rp-song-title").text(song.title);
		$("#rp-artist-name").text(song.artist_name);
		document.title = song.artist_name;
	}
	
	function playNextSong() {
		fetchNextTrack();
	}
	
	function fetchNextTrack() {
		en.playlist.nextSong(1, 5,
			function(data) {
				if (data.response.songs.length > 0) {
					playSong(data.response.songs[0]);
				} else {
					info("No more songs to play on this station");
				}
	
				$("#up-next").empty();
				var names = [];
	
				$.each(data.response.lookahead, 
					function(index, song) {
						names.push(song.artist_name);
					}
				);
				var all = names.join(', ');
				$("#up-next").append(all);
			},
			function() {
				error("Trouble getting the next track on this station");
			}
		);
	}
	
	function createDynamicPlaylist() {
		tinfo("Creating the playlist ...");
	
		var args = {
			'bucket': [ 'id:rdio-US', 'tracks'], 'limit' : true,
			'type':'catalog-radio',
			'seed_catalog' : catalogID,
			'session_catalog' : catalogID,
		};
	
		en.playlist.create(args,
			function(data) {
				fetchNextTrack();
			},
			function() {
				error("Trouble creating playlist session");
			}
		);
	}
	
	function restartDynamicPlaylistWithSeed(artistName) {
		tinfo("Changing the seed to " + artistName + " ...");
	
		var args = {
			'bucket': [ 'id:rdio-US', 'tracks'], 'limit' : true,
			'type':'catalog-radio',
			'seed_catalog' : catalogID,
			'session_catalog' : catalogID,
			'adventurousness' : .9,
			'artist': artistName
		};
	
		en.playlist.restart(args,
			function(data) {
				fetchNextTrack();
			},
			function() {
				error("Trouble restarting playlist session");
			}
		);
	}
	
	function badSong() {
		terror("banning  " + curSong.artist_name);
		en.playlist.feedback('ban_artist', curSong.artist_id,
			function(data) {
				terror("banned songs by " + curSong.artist_name);
				playNextSong();
			},
			function() {
				error("Trouble flagging that as a bad song");
			}
		);
	}
	
	function skipSong() {
		tinfo("skipping  " + curSong.title);
		en.playlist.feedback('skip_song', curSong.id,
			function(data) {
				tinfo("skipped " + curSong.title);
				playNextSong();
			},
			function() {
				error("Trouble skipping song");
			}
		);
	}
	
	function goodSong() {
		var args = { 
			favorite_artist: curSong.artist_id,
			favorite_song: curSong.id
		};
		tinfo("Favoriting  " + curSong.artist_name);
		en.playlist.multifeedback(args,
			function(data) {
				$("#up-next").text("a surprise ...");
				tinfo("favorited song by " + curSong.artist_name);
			},
			function() {
				terror("Trouble giving feedback");
			}
		);
	}
	
	function now() {
		return new Date().getTime();
	}
	
	function startPlaying() {
		$("#create").hide();
		$("#the-player").show();
		createDynamicPlaylist();
	}
	
	function needCatalog() {
		$("#create").show();
		$("#status").hide();
		R.player.pause();
		$("#the-player").hide();
	}
	
	function checkForCatalog() {
		// if have a catalog, start playing music
		var catalog = $.cookie('tpdemo_catalog_id');
		if (catalog) {
			catalogID = catalog;
			tinfo("Found your taste profile, creating a playlist");
			startPlaying();
		} else {
		}
	}
	
	
	function createTasteProfile() {
		var blocks = getArtistUpdateBlock();
	
		if (blocks.length <= 2) {
			alert("Sorry, need at least 3 artists. More is better");
		} else {
			info("Creating your very own Taste Profile");
			var catName = 'manual-' + Math.round(Math.random() * 10000000);
			en.catalog.create(catName, 
				function(data) {
					var catalogID = data.response.id;
					updateTasteProfile(catalogID, blocks);
				},
	
				function(data) {
					error("Couldn't create catalog " + catName);
				}
			);
		}
	}
	
	function getArtistUpdateBlock() {
		var artists = $("#artists").val();
		artists = artists.split(",");
		var blocks = [];
		$.each(artists, 
			function(index, artist) {
				var artist = $.trim(artist);
				var item = {
					action : 'update',
					item : {
						item_id : 'item-' + index,
						artist_name: artist,
						favorite : true
					}
				}
				blocks.push(item);
			}
		);
		return blocks;
	}
	
	function updateTasteProfile(id, blocks) {
		var progressBar = $("#progress-bar");
		info("Uploading your taste to The Echo Nest");
		progressBar.css('width', '20%');
	
		en.catalog.addArtists(id, blocks,
			function(data) {
				var ticket = data.response.ticket;
				en.catalog.pollForStatus(ticket, 
					function(data) {
						if (data.response.ticket_status === 'pending') {
							var percent = 20 + Math.round(80 * data.response.percent_complete / 100.0)
							info("Resolving artists " + percent + " % complete");
							progressBar.css('width', percent  + '%');
						} else if (data.response.ticket_status === 'complete') {
							progressBar.css('width', '100%');
							info("Done!");
							tasteProfileReady(id);
						} else {
							error("Can't resolve taste profile " + data.response.details);
						}
					},
					function() {
						error("Trouble waiting for catalog");
					}
				);
			},
			
			function(data) {
				error("Trouble adding artists to catalog");
			});
	}
	
	function tasteProfileReady(id) {
		info("We've got everything we need, here we go ...");
		catalogID = id;
		$.cookie('tpdemo_catalog_id', id, {expires:365, path: '/' });
		startPlaying();
	}
	
	
	function resetTaste() {
		$.removeCookie('tpdemo_catalog_id', cookieOpts);
		en.catalog.delete(catalogID,
			function() {
				info("Your taste has been deleted");
			},
	
			function(data) {
				error('trouble deleting catalog ', data);
			}
		);
		setTimeout(function() {
			needCatalog();
			$('#resetModal').modal('hide')
		}, 500);
	}
	
	
	
	function initUI() {
		$("#the-player").hide();
		$("#artists").keydown(
			function(){
				if (event.keyCode == 13) {
					$("#status").show();
					createTasteProfile();
				}
			});
	
		$("#bad-song").click(badSong);
		$("#good-song").click(goodSong);
	
		$("#go").click( 
			function() {
				$("#status").show();
				createTasteProfile();
			}
		);
	
	   $("#reset-taste").click(resetTaste);
	
	   $("#view-tp").click(
			function() {
				var url = 'tpview.html?id=' + catalogID;
				window.open(url, 'ViewData');
			}
		);
	
	
	   $("#view-station").click(
			function() {
				var url = 'dpview.html?id=' + en.playlist.sessionID;
				window.open(url, 'ViewData');
			}
		);
	
		$("#restart-station").click(function() {
			var artist = $("#seed-artist").val();
			if (artist.length > 0) {
				restartDynamicPlaylistWithSeed(artist);
				$('#restartModal').modal('hide')
			}
		});
	
		$("#seed-artist").keydown(
			function(){
				if (event.keyCode == 13) {
					var artist = $("#seed-artist").val();
					if (artist.length > 0) {
						restartDynamicPlaylistWithSeed(artist);
						$('#restartModal').modal('hide')
					}
				}
			});
	
	}
	
	$(document).ready(function() {
		// fetchApiKey will fetch the Echo Nest demo key for demos
		// hosted on The Echo Nest, otherwise it fetch an empty key
		fetchApiKey( function(key, isLoggedIn) {
			var trackStartTime = now();
			if (!key) {
				key = 'MY_ECHO_NEST_API_KEY';
			}
	
			api_key = key;
			en = new EchoNest(api_key);
			$.ajaxSetup( {cache: false});
			initUI();
			R.ready(function() {
				R.player.on("change:playingTrack", function(track) {
					if (track) {
						var image = track.attributes.icon;
						$("#rp-album-art").attr('src', image);
						trackStartTime = now();
					} else {
						playNextSong();
					}
				});
	
				R.player.on("change:playState", function(state) {
					if (state == R.player.PLAYSTATE_PAUSED) {
						$("#rp-pause-play i").removeClass("icon-pause");
						$("#rp-pause-play i").addClass("icon-play");
					}
					if (state == R.player.PLAYSTATE_PLAYING) {
						$("#rp-pause-play i").removeClass("icon-play");
						$("#rp-pause-play i").addClass("icon-pause");
					}
				});
	
				R.player.on("change:playingSource", function(track) {});
	
				$("#rp-pause-play").click(function() {
					R.player.togglePause();
				});
	
				$("#rp-next").click(function() {
					var delta = now() - trackStartTime;
					if (delta < maxTimeForSkip) {
						skipSong();
					} else {
						playNextSong();
					}
				});
				checkForCatalog();
			});
		});
	});